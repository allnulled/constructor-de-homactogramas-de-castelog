Ejecutable como documento HTML5
    con autor allnulled
    con nombre app
    con versión dos-por-la-calle-saludar
<head>
    <title>Homactógrafo Z</title>
    <meta charset="utf8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
      .canvas_box {
        background-color: #222;
        box-shadow: 0 0 4px black;
        text-align: center;
        padding-top: 20px;
        padding-bottom: 20px;
      }
      .w_100 {
        width: 100%;
      }
      .win7 pre.salida_del_canvas {
        min-height: 100px;
        padding: 2px;
        font-size: 10px;
        border: 6px double #333;
        background-color: #CCF;
        color: #333;
        text-shadow: 0 0 1px black;
        font-family: Arial;
        margin-top: 2px;
        margin-bottom: 2px;
      }
    </style>
    <script src="js/calo.js"></script>
    <script src="js/castelog-parser.js"></script>
    <script src="js/homactografo.js"></script>
    <script src="js/homactografo.extensiones.js"></script>
</head>
<body>
    <h5>Homactograma de dos por la calle que se encuentran y se saludan</h5>
    <div class="canvas_box">
      <canvas id="canvas_for_demo"></canvas>
    </div>
    <div id="app"></div>
</body>.

asigno window.codigo_de_ejemplo como un código en texto donde {
creo persona2 como pantalla.incorporar("persona2", una nueva utils.clases.Persona()).
hago ~ persona.restablecer.postura().
hago ~ persona.posicionarse.por.eje.x(50).
hago ~ persona2.restablecer.postura().
hago ~ persona2.posicionarse.por.eje.x(450).
hago ~ pantalla.pintarse().
hago ~ Promise.all([
  persona.caminar(1,70,2000,5,20),
  persona2.caminar(0,70,2000,5,20)
]).
asigno persona.nombre como "Calo".
asigno persona2.nombre como "Pepito".
hago ~ persona.decir("¡Hola, Don Pepito!", 1000).
hago ~ persona2.decir("¡Hola, Don Calo!", 1000).
hago ~ persona.decir("¿Pasó usted por mi casa?", 1000).
hago ~ persona2.decir("¡Por su casa yo pasé!", 1000).
hago ~ persona.decir("OK. ¿Traes la pasta?", 1000).
hago ~ persona2.decir("¡Así es! Ten.", 1000).
creo darse_la_mano como una función asíncrona donde {
  creo inclinacion como 18.
  hago ~ persona.posicionar.hombro.derecho(0-inclinacion,500).
  hago ~ persona2.posicionar.hombro.izquierdo(0+inclinacion,500).
  hago ~ persona.posicionar.codo.derecho(0-inclinacion,500).
  hago ~ persona2.posicionar.codo.izquierdo(0+inclinacion,500).
  hago ~ pantalla.pintarse().
  hago ~ persona.posicionar.hombro.derecho(0,500).
  hago ~ persona2.posicionar.hombro.izquierdo(0,500).
  hago ~ persona.posicionar.codo.derecho(0,500).
  hago ~ persona2.posicionar.codo.izquierdo(0,500).
  hago ~ pantalla.pintarse().
}.
hago darse_la_mano().
hago ~ persona.decir("Guai. Es Afghan Kush, te molará, interior guapa.", 1000).
hago ~ darse_la_mano().
hago ~ persona2.decir("Si lo dices tú, me lo creo.", 1000).
hago ~ persona.decir("Bueno, ya me dirás qué te parece.", 1000).
hago ~ persona2.decir("OK. En unos días te diré algo de lo otro.", 1000).
hago ~ persona.decir("Perfecto. Venga tío, cuídate.", 1000).
hago ~ persona2.decir("Vale, nos vemos.").
hago ~ Promise.all([
  persona.caminar(1,200,2000,5,20),
  persona2.caminar(0,200,6000,15,20)
]).
retorno.
}.trim().

creo ConstructorDeHomactogramasDeCastelog como un componente vue2 con nombre "ConstructorDeHomactogramasDeCastelog" con plantilla {
  <div class="ConstructorDeHomactogramasDeCastelog Component win7">
    <div class="editor_box">
      <div v-if="exito_de_compilacion">
        <span>✔ La compilación fue exitosa.</span>
        <details>
          <summary>Mostrar código</summary>
          <div>
            <textarea class="w_100" style="min-height: 300px;" disabled="true" :value="codigo_actual_js"></textarea>
          </div>
        </details>
      </div>
      <div v-if="exito_de_ejecucion">
        <span>✔ La ejecución fue exitosa.</span>
        <pre>{{ JSON.stringify(exito_de_ejecucion, null, 2) }}</pre>
      </div>
      <div v-if="error">
        <span>✘ Error: {{ error.message }}</span>
      </div>
      <pre class="salida_del_canvas" ref="salida_del_canvas"></pre>
      <div style="position: relative;">
        <textarea style="font-family: monospace; font-size: 9px; resize: vertical; min-height: 900px;" class="w_100" v-model="codigo_actual"></textarea>
        <div style="position: absolute; top: 5px; right: 5px; left: auto; bottom: auto;">
          <button v-on:click="() => compilar(true)">Compilar</button>
          <button v-on:click="() => aplicar()">Aplicar</button>
        </div>
      </div>
    </div>
  </div>
} con lógica {
  retorno {
    método data donde {
      retorno {
        codigo_actual_js: "",
        codigo_actual: this.$window.codigo_de_ejemplo,
        persona: undefined,
        fondo: undefined,
        pantalla: undefined,
        exito_de_ejecucion: undefined,
        exito_de_compilacion: undefined,
        error: undefined
      }.
    }.
    propiedad methods como {
      mostrar_exito_de_ejecucion: una función con (resultado) donde {
        asigno this.error como undefined.
        asigno this.exito_de_compilacion como undefined.
        asigno this.exito_de_ejecucion como resultado.
        asigno this.exito_de_ejecucion_timeout_id como setTimeout(una lambda donde asigno this.exito_de_ejecucion como undefined después hago this.$forceUpdate(true), 1000 * 10).
        hago this.$forceUpdate(true).
      },
      mostrar_exito_de_compilacion: una función con () donde {
        asigno this.error como undefined.
        asigno this.exito_de_ejecucion como undefined.
        asigno this.exito_de_compilacion como true.
        asigno this.exito_timeout_id como setTimeout(una lambda donde asigno this.exito_de_compilacion como undefined después hago this.$forceUpdate(true), 1000 * 10).
        hago this.$forceUpdate(true).
      },
      mostrar_error: una función con (error) donde {
        ### imprimo error.
        asigno this.exito_de_ejecucion como undefined.
        asigno this.exito_de_compilacion como undefined.
        asigno this.error como error.
        asigno this.error_timeout_id como setTimeout(una lambda donde asigno this.error como undefined después hago this.$forceUpdate(true), 1000 * 10).
        hago this.$forceUpdate(true).
      },
      compilar: una función con (mostrar_exito) donde {
        creo codigo_calo como this.codigo_actual.
        imprimo codigo_calo.
        creo codigo_js como Castelog_parser.parse(codigo_calo).
        creo codigo_temporal como `(async function(persona, pantalla, fondo, componente, juego, utils) {\n  try {\n    console.log(this);\n\n${codigo_js}\n\n  } catch(error) {\n    console.log(error);\n    this.mostrar_error(error);\n  }\n})`.
        creo codigo_js_final como codigo_temporal.
        imprimo codigo_js_final.
        asigno this.codigo_actual_js como codigo_js_final.
        si mostrar_exito {
          hago this.mostrar_exito_de_compilacion().
        }.
        retorno codigo_js_final.
      } en errores hago this.mostrar_error(error),
      aplicar: una función asíncrona donde {
        creo codigo_js como this.compilar().
        imprimo codigo_js.
        creo funcion_js como this.$window.eval(codigo_js).
        imprimo funcion_js.
        creo resultado como asíncronamente funcion_js.call(this, this.persona, this.pantalla, this.pantalla.fondo, this, this.juego, this.juego.utils).
        hago this.juego.utils.setLastScript(this.codigo_actual).
        si resultado no es tipo indefinido {
          hago this.mostrar_exito_de_ejecucion(resultado).
        }.
      } en errores hago this.mostrar_error(error)
    }.
    método mounted donde {
      imprimo "Montada página de inicio.".
      creo juego como this.$window.homactografo(this.$refs.salida_del_canvas).
      asigno this.juego como juego.
      hago this.$window.extender_persona_prototipo(juego.utils.clases.Persona.prototype, juego.pantalla).
      asigno this.persona como this.juego.persona.
      asigno this.fondo como this.juego.fondo.
      asigno this.pantalla como this.juego.pantalla.
      ### creo ultimo_script_aplicado como this.juego.utils.getLastScript().
      ### asigno this.codigo_actual como ultimo_script_aplicado o this.$window.codigo_de_ejemplo.
      hago setTimeout(una lambda donde hago this.pantalla.pintarse(), 1000).
    }.
  }.
}.

creo App como una aplicación vue2 con nombre "App" con rutas [{
    propiedad path como "/".
    propiedad name como "Home".
    propiedad component como ConstructorDeHomactogramasDeCastelog.
    propiedad props como {}.
}] con traducciones {
    propiedad es como {}.
    propiedad en como {}.
    propiedad ca como {}.
} con plantilla {
  <div class="App Component Castelog-app">
    <router-view></router-view>
  </div>
} con estilos {
    html {}
    body {}
    .Component {}
    .App {}
} con lógica {
  retorno {
    método data donde {
      retorno {
        
      }.
    }.
    propiedad methods como {}.
    propiedad watch como {}.
    método beforeMount donde {}.
    método mounted donde {}.
  }.
} montada en "#app".